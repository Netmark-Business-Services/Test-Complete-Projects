class HealthEdgeManager:
    def __init__(self, healthEdge_Manager):
        self.healthEdge_Manager = healthEdge_Manager

    def navigate_to_workbasket(self):
        Log.Message("Navigating to the Enrollment Review Repair Workbasket.")
        self.healthEdge_Manager.HomeForm.BarDockControl.DockedBarControl.ClickItem("Workbasket|Enrollment Review  Repair")
        Log.Message("Navigation complete.")

    def process_workbasket(self):
        resultGridEnrollmentReviewRepair = self.healthEdge_Manager.WorkbasketForm.panelControlRight.panelControlBaseResults.panelControlResults.ResultGridEnrollmentReviewRepair
        gridControl = resultGridEnrollmentReviewRepair.gridControlResults
        rowCount = gridControl.wRowCount
        Log.Message(f"Initial Row Count: {rowCount}")

        targetDescription = "Plan Selection Date Range UDT validation failed"
        reviewRepairReasonColumnIndex = 12
        i = 0
        Log.Message("Starting to process rows.")
        
        processed_rows = set()  # Track processed rows to avoid infinite loops
        failed_rows = set()  # Track rows that failed to move out of workbasket

        while i < rowCount:
            Log.Message(f"Processing row: {i}")
            if i in failed_rows:
                Log.Message(f"Skipping row {i} as it previously failed to move out of workbasket.")
                i += 1
                continue
            
            reviewReason = gridControl.wValue[i, reviewRepairReasonColumnIndex]

            if reviewReason.contains(targetDescription):
                Log.Message(f"Matched Row {i}: {reviewReason}")
                self.edit_row(gridControl, i)
                self.save_changes()
                self.add_comment()
                self.confirm_changes()
                self.refresh_workbasket(resultGridEnrollmentReviewRepair)
                rowCount = gridControl.wRowCount
                Log.Message(f"Updated Row Count: {rowCount}")

                if i in processed_rows:  # Check if the row has been processed before
                    Log.Message(f"Row {i} has been processed before, moving to the next row.")
                    failed_rows.add(i)  # Mark the row as failed
                    i += 1
                    continue
                processed_rows.add(i)  # Mark the row as processed
                
                i = 0  # Reset index to start from the beginning
            else:
                Log.Message(f"No match found for row {i}, moving to the next row.")
                i += 1

        Log.Message("Completed processing all rows.")

    def edit_row(self, gridControl, rowIndex):
        gridControl.ClickCellXY(rowIndex, "Edit", 22, 44)
        asOfDate = self.healthEdge_Manager.AsOfDate
        if asOfDate.Exists:
            Log.Message("Setting 'Do Not Reprocess Claims' option.")
            asOfDate.panelControlTop.radioGroupReprocessClaims.ClickItem("Do Not Reprocess Claims")
            asOfDate.panelControlBottom.simpleButtonOK.ClickButton()
        else:
            Log.Warning("asOfDate object does not exist.")

    def save_changes(self):
        dockedBarControl = self.healthEdge_Manager.EntityEditForm.BarDockControl.DockedBarControl
        dockedBarControl.ClickItem("Save")

    def add_comment(self):
        selectMemberReasonCodes = self.healthEdge_Manager.SelectMemberReasonCodes
        panelControl = selectMemberReasonCodes.panelControl1
        panelControl.lookUpReasonCodes.Click(112, 16)
        self.healthEdge_Manager.PopupLookUpEditForm.Click(109, 13)
        textBoxMaskBox = panelControl.memoEditMemberComment.TextBoxMaskBox
        textBoxMaskBox.Click(69, 19)
        textBoxMaskBox.Keys("WB_Automation")
        selectMemberReasonCodes.simpleButtonOK.ClickButton()

    def confirm_changes(self):
        aqUtils.Delay(3000)
        if self.healthEdge_Manager.XtraMessageBoxForm.Exists:
            self.healthEdge_Manager.XtraMessageBoxForm.SimpleButton.ClickButton()
        else:
            return

    def refresh_workbasket(self, resultGridEnrollmentReviewRepair):
        dockedBarControl = resultGridEnrollmentReviewRepair.BarDockControl.DockedBarControl
        aqUtils.Delay(5000)
        dockedBarControl.ClickItem("Refresh")
        aqUtils.Delay(5000)
