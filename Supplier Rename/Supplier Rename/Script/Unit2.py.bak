import logging
from datetime import datetime

class HealthEdgeManager:
    def __init__(self):
        self.healthEdge_Manager = Aliases.HealthEdge_Manager
        self.failed_rows = set()  # Track rows that failed to move out of the workbasket

        # Set up logging to a file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_filename = f'workbasket_log_{timestamp}.txt'

        # Configure logging
        logging.basicConfig(filename=log_filename, level=logging.INFO, 
                            format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger()

    def login_to_application(self):
        # Part 1 - Starting the application
        TestedApps.HealthEdge_Manager.Run(1, True)
        loginForm = self.healthEdge_Manager.LoginForm
        textBoxMaskBox = loginForm.textEditUserName.TextBoxMaskBox
        textBoxMaskBox.Click(23, 3)
        textBoxMaskBox.SetText("skrishnan")
        textBoxMaskBox.Keys("[Tab]")
        loginForm.textEditPassword.TextBoxMaskBox.SetText(Project.Variables.Password1)
        loginForm.lookUpEditServers.Click(60, 9)
        self.healthEdge_Manager.PopupLookUpEditForm.Click(29, 73)
        loginForm.simpleButtonSubmit.ClickButton()
        aqUtils.Delay(30000)

    def select_work_basket(self):
        # Part 2 - Select work basket
        self.healthEdge_Manager.HomeForm.XtraMainMenu.Click("Workbasket|Claim Review & Repair")
        aqUtils.Delay(5000)

    def set_filtering_criteria(self):
        # Part 3 - Set filtering criteria in work basket
        resultGridClaimReviewRepair = self.healthEdge_Manager.WorkbasketForm.panelControlRight.panelControlBaseResults.panelControlResults.ResultGridClaimReviewRepair
        panelControl = resultGridClaimReviewRepair.panelControlCustomPanel.ClaimReviewRepairWorkbasketSearchCriteria.entityPanelSearchInput.panelControlCommonSearch
        referenceMenuButton = panelControl.codeEntryResolverButton
        referenceMenuButton.Click(12, 11)
        referenceMenuButton.PopupMenu.Click("Look up")
        resolveDialog = self.healthEdge_Manager.ResolveDialog
        panelControl2 = resolveDialog.panelControlLeft
        entityPanel = panelControl2.panelControlSearchCriteria.xtraScrollableControlSearchCriteria.CodeEntrySearchCriteria.entityPanel
        entityPanel.autoEditCodeEntry.panelControlAutoEdit.TextEdit.SetText("7")
        textEdit = entityPanel.autoEditShortName.panelControlAutoEdit.TextEdit
        textBoxMaskBox = textEdit.TextBoxMaskBox
        textBoxMaskBox.Click(31, 8)
        textBoxMaskBox.Keys("![ReleaseLast]")
        textEdit.SetText("Supplier could not be identified")
        panelControl2.panelControlSearch.simpleButtonSearch.ClickButton()
        resolveDialog.panelControlBottom.simpleButtonOK.ClickButton()
        textBoxMaskBox = panelControl.textEditReviewReasonCode.TextBoxMaskBox
        textBoxMaskBox.Click(117, 5)
        textBoxMaskBox.Keys("[Enter]")

    def check_and_edit_claim(self, j, gridControl):
        # Part 4 - Check if reason matches with what we are looking for and edit
        review_reason = gridControl.wValue[j, 10]
        reasons = str(review_reason)
        self.logger.info(f"Reason in row {j} is {reasons}")
        if reasons == "Supplier could not be identified":
            gridControl.ClickCellXY(j, "Edit", 16, 14)
            aqUtils.Delay(18000)
            return True
        return False

    def retrieve_address_and_npi(self):
        # Part 5 - Edit claim form to retrieve address and NPI ID
        claimEditor = self.healthEdge_Manager.ClaimEditor
        claimEditor.Activate()
        headerGroupControl = claimEditor.panelEditClaim.panelControlDetail.panelControlDetailView.Claim.tabControlClaim.tabPageHeader.claimHeader.entityPanel.subEntityPanelConsolidatedInput.panelControlSubscriber.headerGroupProvider.headerGroupControlSubmittedSupplierInformation
        headerGroupControl.HeaderGroupHyperLinkEdit.Click(8, 8)
        entityPanel = headerGroupControl.autoSizingPanelSubmittedSupplier.headerGroupControlSubmittedSupplierInfo.SubmittedSupplierInfo.entityPanelSubmittedSupplierInfo

        address = entityPanel.autoEditSubmittedSupplierInfoAddress.panelControlAutoEdit.TextEdit.TextBoxMaskBox.wText
        address2 = entityPanel.autoEditSubmittedSupplierInfoAddress2.panelControlAutoEdit.TextEdit.TextBoxMaskBox.wText.strip()
        city = entityPanel.autoEditSubmittedSupplierInfoCityName.panelControlAutoEdit.TextEdit.TextBoxMaskBox.wText
        state = entityPanel.autoEditSubmittedSupplierInfoState.panelControlAutoEdit.LookUpEdit.Text
        zipCode = entityPanel.autoEditSubmittedSupplierInfoZipCode.panelControlAutoEdit.TextEdit.TextBoxMaskBox.wText

        combinedaddress = f"{address}, {address2}, {city}, {state}, {zipCode}" if address2 else f"{address}, {city}, {state}, {zipCode}"
        self.logger.info(f"Combined address: {combinedaddress}")

        NPI = entityPanel.autoEditSubmittedSupplierInfoNPI.panelControlAutoEdit.TextEdit.Text
        self.logger.info(f"NPI: {NPI}")

        return combinedaddress, NPI

    def check_supplier_in_db(self, NPI, combinedaddress):
        # Part 6 - Check for matching supplier in DB
        npi_int = int(NPI)
        rejected_list_npi = [
            1104877810,
            1215903018,
            1235866138,
            1528488756,
            1609291996,
            1629167457,
            1639172372,
            1710927231,
            1760047708,
            1780656421
        ]

        if npi_int in rejected_list_npi:
            self.logger.info("NPI in rejected list")
            return None

        self.healthEdge_Manager.HomeForm.BarDockControl.DockedBarControl.ClickItem("Search")
        textEdit = self.healthEdge_Manager.SearchDialog.panelTop.panelSearchCriteria.tabControlSearchCriteria.tabPageGeneral.SimpleSupplierSearchCriteria.entityPanelSupplierSearchInput.autoEditSupplierHccIdentifier.panelControlAutoEdit.TextEdit
        textEdit.SetText(NPI)
        textEdit.TextBoxMaskBox.Keys("[Enter]")

        xtraMessageBoxForm = self.healthEdge_Manager.WaitAliasChild("XtraMessageBoxForm2", 1000)
        if xtraMessageBoxForm.Exists:
            self.logger.info("Data not Found")
            self.healthEdge_Manager.XtraMessageBoxForm2.SimpleButton.ClickButton()
            self.healthEdge_Manager.SearchDialog.BarDockControl.DockedBarControl.ClickItem("Close")
            claimEditor = self.healthEdge_Manager.ClaimEditor
            claimEditor.Activate()
            claimEditor.BarDockControl.DockedBarControl.ClickItem("Close")
            self.healthEdge_Manager.XtraMessageBoxForm.SimpleButton.ClickButton()
            return None

        searchDialog = self.healthEdge_Manager.SearchDialog
        dockedBarControl = searchDialog.BarDockControl2.DockedBarControl
        dockedBarControl.Drag(1400, 17, 166, 195)
        gridControl = searchDialog.panelControl1.panelResults.BaseResultGrid.gridControlResults
        rowCount = gridControl.wRowCount

        for i in range(rowCount):
            address_value = gridControl.wValue[i, 3]
            if address_value == combinedaddress:
                supplier_value = gridControl.wValue[i, 2]
                self.logger.info(f"Found matching supplier: {supplier_value}")
                return supplier_value

        self.logger.info("No matching address found")
        return None

    def paste_supplier_name(self, supp_to_copy):
        # Part 7 - Paste the Supplier name in edit_claim form
        self.healthEdge_Manager.SearchDialog.Close()
        claimEditor = self.healthEdge_Manager.ClaimEditor
        claimEditor.Activate()
        headerGroupControl = claimEditor.panelEditClaim.panelControlDetail.panelControlDetailView.Claim.tabControlClaim.tabPageHeader.claimHeader.entityPanel.subEntityPanelConsolidatedInput.panelControlSubscriber.headerGroupProvider.headerGroupControlSubmittedSupplierInformation.autoSizingPanelSubmittedSupplier.headerGroupControlSubmittedSupplierInfo.SubmittedSupplierInfo.entityPanelSubmittedSupplierInfo.autoEditSubmittedSupplierInfoFullName.panelControlAutoEdit.TextEdit.TextBoxMaskBox
        headerGroupControl.SetText(supp_to_copy)
        self.logger.info("Pasted supplier name")

    def main(self):
        self.login_to_application()
        self.select_work_basket()
        self.set_filtering_criteria()

        resultGridClaimReviewRepair = self.healthEdge_Manager.WorkbasketForm.panelControlRight.panelControlBaseResults.panelControlResults.ResultGridClaimReviewRepair
        gridControl = resultGridClaimReviewRepair.gridControlResults
        WBrowCount = gridControl.wRowCount
        self.logger.info(f"Row count in this page is {WBrowCount}")

        for j in range(WBrowCount):
            if self.check_and_edit_claim(j, gridControl):
                combinedaddress, NPI = self.retrieve_address_and_npi()
                supp_to_copy = self.check_supplier_in_db(NPI, combinedaddress)
                if supp_to_copy:
                    self.paste_supplier_name(supp_to_copy)

# Execute the main function
if __name__ == "__main__":
    manager = HealthEdgeManager()
    manager.main()
